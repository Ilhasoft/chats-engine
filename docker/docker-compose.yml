version: '3.6'

services:
  postgres:
    image: postgres
    ports:
      - 5432:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - default
      - chats
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-chats}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-chats}
      - POSTGRES_DB=${POSTGRES_DB:-chats}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [ node.role == manager ]
  redis:
    image: redis:6.2
    ports:
      - 6379:6379

  chats:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DEBUG=${DEBUG:-true}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - SECRET_KEY=${SECRET_KEY:-keepitsecret}
      - DATABASE_URL=${DATABASE_URL:-postgres://chats:chats@database:5432/chats}
      - LANGUAGE_CODE=${LANGUAGE_CODE:-en-us}
      - TIME_ZONE=${TIME_ZONE:-America/Maceio}
      - MEDIA_ROOT=${MEDIA_ROOT:-media/}
      - USE_S3=${USE_S3:-false}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - USE_OIDC=${USE_OIDC:-false}
      - OIDC_RP_CLIENT_ID=${OIDC_RP_CLIENT_ID}
      - OIDC_RP_CLIENT_SECRET=${OIDC_RP_CLIENT_SECRET}
      - OIDC_OP_AUTHORIZATION_ENDPOINT=${OIDC_OP_AUTHORIZATION_ENDPOINT}
      - OIDC_OP_TOKEN_ENDPOINT=${OIDC_OP_TOKEN_ENDPOINT}
      - OIDC_OP_USER_ENDPOINT=${OIDC_OP_USER_ENDPOINT}
      - OIDC_OP_JWKS_ENDPOINT=${OIDC_OP_JWKS_ENDPOINT}
      - OIDC_RP_SIGN_ALGO=${OIDC_RP_SIGN_ALGO}
    depends_on:
      - postgres
      - redis

volumes:
  postgres:


networks:
  chats:
    external: true
